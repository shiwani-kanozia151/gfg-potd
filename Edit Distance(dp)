Edit Distance

https://www.geeksforgeeks.org/problems/edit-distance3702/1

Given two strings s1 and s2. Return the minimum number of operations required to convert s1 to s2.
The possible operations are permitted:

Insert a character at any position of the string.
Remove any character from the string.
Replace any character from the string with any other character.

Examples:

Input: s1 = "geek", s2 = "gesek"
Output: 1
Explanation: One operation is required, inserting 's' between two 'e' in s1.

Input: s1 = "gfg", s2 = "gfg"
Output: 0
Explanation: Both strings are same.

Input: s1 = "abcd", s2 = "bcfe"
Output: 3
Explanation: We can convert s1 into s2 by removing ‘a’, replacing ‘d’ with ‘f’ and inserting ‘e’ at the end. 

Constraints:
1 ≤ s1.length(), s2.length() ≤ 10^3
Both the strings are in lowercase.

APPROACH:
As here we have noticed that there are options like either we can insert, delete, replace options so after getting the options, the recursion strike in our mind as soon 
as we are getting the options, so here i have used the recursion + memoization technique to solve the problem..

CODE:
class Solution {
  public:
    // Function to compute the edit distance between two strings
    int solve(int n, int m, string &s1, string &s2, int i, int j, 
            vector<vector<int>>&dp )
    {
        if(i==n) return m-j;//ab, abcd .. insert operation required
        if(j==m) return n-i;//abcd, ab .. delete opertaion required
     
        if(dp[i][j]!=-1)
         return dp[i][j];
        
        if(s1[i]==s2[j]) //if both matched already then no need to perform any operation..
         return solve(n, m, s1, s2, i+1, j+1, dp); 
         
        int insert=1+solve(n, m, s1, s2, i, j+1, dp); //if it is required to insert the char..
        int Delete=1+solve(n, m, s1, s2, i+1, j, dp);//if it is required to delete the char..
        int replace=1+solve(n, m, s1, s2, i+1, j+1, dp);//if it is required to replcae the char..
        
        
        return dp[i][j] = min(insert, min(Delete, replace)); // at last finding the minimum out of all..
        
    }
    int editDistance(string& s1, string& s2) {
        // code here
        int n=s1.size(), m=s2.size();
        
        vector<vector<int>>dp(n+1, vector<int>(m+1, -1));
        return solve(n, m, s1, s2, 0, 0, dp);
    }
};
