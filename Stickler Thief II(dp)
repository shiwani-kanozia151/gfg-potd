Stickler Thief II

https://www.geeksforgeeks.org/problems/house-robber-ii/1

You are given an array arr[] which represents houses arranged in a circle, where each house has a certain value. A thief aims to maximize the total stolen value without robbing two adjacent houses.
Determine the maximum amount the thief can steal.
Note: Since the houses are in a circle, the first and last houses are also considered adjacent.

Examples:

Input: arr[] = [2, 3, 2]
Output: 3
Explanation: arr[0] and arr[2] can't be robbed because they are adjacent houses. Thus, 3 is the maximum value thief can rob.

Input: arr[] = [1, 2, 3, 1]
Output: 4
Explanation: Maximum stolen value: arr[0] + arr[2] = 1 + 3 = 4

Input: arr[] = [2, 2, 3, 1, 2]
Output: 5
Explanation: Maximum stolen value: arr[0] + arr[2] = 2 + 3 = 5 or arr[2] + arr[4] = 3 + 2 = 5

Constraints:
2 ≤ arr.size() ≤ 10^5
0 ≤ arr[i] ≤ 10^4

APPROACH:
basically the problem here consists of choices each element has a choice whether to take it or not to take it as there are choices and we have to take decision so this 
problem is based on recursion and memoization for its optimize version. here basically the houses are in cicular fashion so if thief has stolen money fron house1 then he
will not be able to stole the money from last house. so the idea to solve this problem is like i have created 2 arrays one from  beginning to last-1 element and one from
first element to the last element. and use the approach of take and not_take..

CODE:
class Solution {
  public:
    
   // int t[100001];
    
    int solve(vector<int>&arr, int idx, vector<int>&t)
    {
        if(idx>=arr.size()) return 0;
        
       if(t[idx] != -1) return t[idx];
        
        int take = arr[idx]+solve(arr, idx+2, t);
        
        int not_take = solve(arr, idx+1, t);
        
       // return max(take, not_take);
        return t[idx]=max(take, not_take);
    }
    int maxValue(vector<int>& arr) {
        // your code here
        int n=arr.size();
        vector<int>arr1, arr2;
        
       // memset(t, -1, sizeof(t));
        
        for(int i=0; i<n-1; i++)
         arr1.push_back(arr[i]);
         
        for(int i=1; i<n; i++)
         arr2.push_back(arr[i]);
         
         vector<int>t1(n+1, -1);
         vector<int>t2(n+1, -1);
         
        return max(solve(arr1, 0, t1), solve(arr2, 0, t2));
        
    }
};

