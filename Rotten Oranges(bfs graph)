Rotten Oranges

https://www.geeksforgeeks.org/problems/rotten-oranges2536/1

Given a matrix mat[][] of dimension n * m where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cell have fresh oranges
2 : Cell have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. A rotten orange at index (i, j) can rot other fresh orange at 
indexes (i-1, j), (i+1, j), (i, j-1), (i, j+1) (up, down, left and right) in a unit time.
Note: Your task is to return the minimum time to rot all the fresh oranges. If not possible returns -1.

Examples:

Input: mat[][] = [[0, 1, 2], [0, 1, 2], [2, 1, 1]]
Output: 1
Explanation: Oranges at positions (0,2), (1,2), (2,0) will rot oranges at (0,1), (1,1), (2,2) and (2,1) in unit time.

Input: mat[][] = [[2, 2, 0, 1]]
Output: -1
Explanation: Oranges at (0,0) and (0,1) can't rot orange at (0,3).

Input: mat[][] = [[2, 2, 2], [0, 2, 0]]
Output: 0
Explanation: There is no fresh orange. 

Constraints:
1 ≤ mat.size() ≤ 500
1 ≤ mat[0].size() ≤ 500
mat[i][j] = {0, 1, 2} 

APPROACH:
Here this is the problem of the graph and they had told us to tell the minimum time required to rot all the oranges for that we require BFS as the property of BFS is 
like used to find the shortest distance as while traversing it covering all his friends then the friends of friends so in one go he will cover all his friends which 
help in taking less time. 
so here also the thing is like that firs we will push all the rotten oranges in the queue and the time also and run simple bfs and calculate the time needed to rot all 
its adjacents oranges.

CODE:
class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size(), m=grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        
        queue<pair<pair<int, int>, int>>q;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]==0)
                 vis[i][j]=1;
                 
                if(grid[i][j]==2)
                {
                   q.push({{i, j}, 0});
                   vis[i][j]=1;
                }
                 
            }
        }
        
        
        int dis=0;
        
        int deltax[4]={0, -1, 0, 1};
        int deltay[4]={-1, 0, 1, 0};
        
        while(!q.empty())
        {
            auto x=q.front();
             q.pop();
             
             int i=x.first.first;
             int j=x.first.second;
              dis=x.second;
            
            for(int k=0; k<4; k++)
            {
                int newx=deltax[k]+i;
                int newy=deltay[k]+j;
                
                if(newx>=0 && newx<n && newy>=0 && newy<m 
                           && vis[newx][newy]==0) 
                { 
                   vis[newx][newy]=1;
                   q.push({{newx, newy}, dis+1});
                }
            }
        }
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(vis[i][j]==0)
                 return -1;
            }
        }
        
        return dis;
    }
};

