DATE: 10 FEB 2025

// K Sum Paths

Given a binary tree and an integer k, determine the number of downward-only paths where the sum of the node values in the path equals k. A path can start and end at any node within the tree but must always move downward (from parent to child).

Examples:

Input: k = 7   

Output: 3
// for explanation see the problem on gfg .

THIS PROBLEM IS LITTLE BIT SAME AS FINDING THE COUNT OF SUBARRAY HAVING SUM EQUAL TO K..

here we are storing the currsum in map with its frequency, how many times that currsum appears in the map.
so while traversing if we get currsum==k then increment the count and if currsum-k is present in the map then we ad the frequncy of that to the count 

dry run the code u will understand it better..

CODE:

class Solution {
  public:
    void solve(Node *root, int k,int currSum,int &count,unordered_map<int,int>&mp){
        if(!root) return ;
        
        currSum+=root->data;
        
        if(currSum==k) count ++;
        
        if(mp.find(currSum-k) != mp.end())
           count+=mp[currSum-k];
           
        mp[currSum]++;
        
        solve(root->left,k,currSum,count,mp);
        solve(root->right,k,currSum,count,mp);
        
        mp[currSum]--;
    }
    int sumK(Node *root, int k) {
        //CodeGenius
        unordered_map<int,int>mp;
        int count=0;
        solve(root,k,0,count,mp);
        return count;
    }
};

 