Lowest Common Ancestor in a BST

Given a Binary Search Tree (with all values unique) and two nodes n1 and n2 (n1 != n2). You may assume that both nodes exist in the tree. Find the Lowest Common Ancestor (LCA) of the given two nodes in the BST.
LCA between two nodes n1 and n2 is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).

Examples:
Input: root = [5, 4, 6, 3, N, N, 7, N, N, N, 8], n1 = 7, n2 = 8
Output: 7
Explanation: 7 is the closest node to both 7 and 8, which is also an ancestor of both the nodes.

Input: root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], n1 = 8, n2 = 14            
Output: 8
Explanation: 8 is the closest node to both 8 and 14, which is also an ancestor of both the nodes.

Input: root = [2, 1, 3], n1 = 1, n2 = 3        
Output: 2
Explanation: 2 is the closest node to both 1 and 3, which is also an ancestor of both the nodes.

APPROACH1: see in this approach we will make 3 traversal 2 for the tree and 1 for the array traversal.. which we have used to store the traversal of the tree till the give n2 nodes
 so here first we traverse for n1 and traverse to the node whose value saame as th given node value and in between whatever node came store it in an array and likewise do for
the n2. and we will get 2 arrays and then we need to traverse the array and find the last elemnt in the array which is present in both array..

TC-O(n) and SC-O(n) this is using extra space so we move the next approach


APPROACH2: go to video of code story with mik..

class Solution {
  public:
    
    Node* LCA(Node* root, Node* n1, Node* n2) {
        // code here
        
        if(root==NULL) return NULL;
        
        if(root->data==n1->data || root->data==n2->data)
         return root;
         
        Node* leftN=LCA(root->left, n1, n2);
        Node* rightN=LCA(root->right, n1, n2);
        
        if(leftN!=NULL && rightN!=NULL)
         return root;
         
        if(leftN!=NULL)
          return leftN;
        
        return rightN;
    }
};

