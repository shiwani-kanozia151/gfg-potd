Undirected Graph Cycle

https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not.

Examples:

Input: V = 4, E = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]]
Output: true
Explanation:  
1 -> 2 -> 0 -> 1 is a cycle.

Input: V = 4, E = 3, edges[][] = [[0, 1], [1, 2], [2, 3]]
Output: false
Explanation: 
 
No cycle in the graph.
Constraints:
1 ≤ V ≤ 10^5
1 ≤ E = edges.size() ≤ 10^5

APPROACH: 
basically here to find the cycle in the undirected graph first we have make a adjacency list and after that we are using the the concept of paretn and neighbour and 
take a visited vector to keep track of the visited nodes if the node is visited and parent!=it then we will return true that the cycle is there and rest the code will 
clear.

CODE:
class Solution {
  public:
  
    bool dfs(vector<int>&vis, vector<int>adj[], int parent, int neighbor)
    {
        vis[neighbor]=1;
        
        for(auto it: adj[neighbor])
        {
            if(!vis[it])
            {
                if(dfs(vis, adj, neighbor, it))
                 return true;
            }
            else if(parent!=it && vis[it]!=0)
                return true;
        
        }
        
        return false;
       
    }
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Code here
        vector<int>vis(V, 0);
        vector<int>adj[V];
        
        for(auto it: edges)
        {
          adj[it[0]].push_back(it[1]);
          adj[it[1]].push_back(it[0]);
        }
        
         for(int i=0; i<V; i++)
         {
             if(!vis[i])
             {
                 if(dfs(vis, adj, -1, i))
                  return true;
             }
         }
         
         return false;
        
        // queue<int>q;
        // q.push(0);
        
        // while(!q.empty())
        // {
        //     int x=q.front();
        //     q.pop();
            
        //     for(auto it:adj[x])
        //     {
        //         if(!vis[it])
        //         {
        //             q.push(it);
        //             vis[it]=1;
        //         }
        //         else 
        //          return false;
        //     }
            
        // }
    }
};
