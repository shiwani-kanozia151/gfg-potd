Matrix Chain Multiplication

https://www.geeksforgeeks.org/problems/matrix-chain-multiplication0303/1

Given an array arr[] which represents the dimensions of a sequence of matrices where the ith matrix has the dimensions (arr[i-1] x arr[i]) for i>=1, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.

Examples:

Input: arr[] = [2, 1, 3, 4]
Output: 20
Explanation: There are 3 matrices of dimensions 2 × 1, 1 × 3, and 3 × 4, Let this 3 input matrices be M1, M2, and M3. There are two ways to multiply: ((M1 x M2) x M3) and (M1 x (M2 x M3)), note that the result of (M1 x M2) is a 2 x 3 matrix and result of (M2 x M3) is a 1 x 4 matrix. 
((M1 x M2) x M3)  requires (2 x 1 x 3) + (2 x 3 x 4) = 30 
(M1 x (M2 x M3))  requires (1 x 3 x 4) + (2 x 1 x 4) = 20. 
The minimum of these two is 20.

Input: arr[] = [1, 2, 3, 4, 3]
Output: 30
Explanation: There are 4 matrices of dimensions 1 × 2, 2 × 3, 3 × 4, 4 × 3. Let this 4 input matrices be M1, M2, M3 and M4. The minimum number of multiplications are obtained by ((M1 x M2) x M3) x M4). The minimum number is (1 x 2 x 3) + (1 x 3 x 4) + (1 x 4 x 3) = 30.

Input: arr[] = [3, 4]
Output: 0
Explanation: As there is only one matrix so, there is no cost of multiplication.

Constraints: 

2 ≤ arr.size() ≤ 100
1 ≤ arr[i] ≤ 200

APPROACH:
The MCM itself is a approach to solve many problems like palidrome partioning and many more. so to solve this problem first like we will be given with a array of size n 
and the number of matrixes we will be able to make is only n-1; 

see how to choose index i;
 if we start i from 0 then the matrixi will be formed as arr[i-1]*arr[i] but if i=0 then i-1 will be a negative indexso this will not work ..
 therefor i will start from 1 instead of 0. 

see how to choose index j;
  if we will take j as n then it will be out of bound thats why we need to take j as n-1 ;

calculating cost;
 calculation of cost = arr[i-1]*arr[k]*arr[j];

here basically we need to put parenthesis to such that the cost will be minimum so we need to check after putting parenthesis one by one and find the result as the minimum 
cost so first in the recursive code we will be running a loop basically which will be shifting the parenthesis the loop will start from i to j and inside the loop we will
be having a recursive call which is like solve(arr, i, k)+solve(arr, k+1, j)+(arr[i-1]*arr[j]*arr[k]) and a ans variable holding the min(ans, temp); 

for the loop also we need to have first check whether ir will start from i or i+1 and till j or j-1 like that 
in this case there are two possible ways to take k
i. k=i to k=j and while calling i to k and k+1 to j;
ii. k=i+1, k=j  and while calling i to k-1 and k to j;

CODE:

class Solution {
  public:
  
  int t[101][101];
    
    int solve(vector<int>&arr, int i, int j)
    {
        if(i>=j) return 0;
        
        if(t[i][j] != -1) return t[i][j];
        
        int mini=INT_MAX;
        
        for(int k=i; k<j; k++)
        {
            int temp=(arr[i-1]*arr[k]*arr[j]) +
                      solve(arr, i, k)+solve(arr, k+1, j);
                     
            
            mini=min(mini, temp);
        }
        
        return t[i][j]=mini;
    }
    int matrixMultiplication(vector<int> &arr) {
        // code here
        int n=arr.size();
        memset(t, -1, sizeof(t));
        return solve(arr, 1, n-1);
    }
};
