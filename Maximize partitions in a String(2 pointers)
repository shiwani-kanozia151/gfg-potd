Maximize partitions in a String

https://www.geeksforgeeks.org/problems/maximize-partitions-in-a-string/1

Given a string s of lowercase English alphabets, your task is to return the maximum number of substrings formed, after possible partitions
(probably zero) of s such that no two substrings have a common character.

Examples:

Input: s = "acbbcc"
Output: 2
Explanation: "a" and "cbbcc" are two substrings that do not share any characters between them.

Input: s = "ababcbacadefegdehijhklij"
Output: 3
Explanation: Partitioning at the index 8 and at 15 produces three substrings: “ababcbaca”, “defegde”, and “hijhklij” such that none of them have a common character. So, the maximum number of substrings formed is 3.

Input: s = "aaa"
Output: 1
Explanation: Since the string consists of same characters, no further partition can be performed. Hence, the number of substring (here the whole string is considered as the substring) is 1.

Constraints:
1 ≤ s.size() ≤ 10^5
'a' ≤ s[i] ≤ 'z' 

APPROACH:
the approach is like first we will calculate the last index of evry char then we will use the 2 pointer approach .
first create a map or use 26 sized array to store the char with their indexes and then take 2 variables i=0, j=0, end=mp[s[j]], and traverse the array and calcualte 
end by taking max(end, mp[s[j]]) and then after that if j==end then enter the size of the string in the res array the size will be calculated by j-i+1, and move i=j+1 
and after that increment the j.

CODE:
class Solution {
  public:
    int maxPartitions(string &s) {
        // code here
        vector<int>res;
        int n=s.size();
        
        //same as the potd of leetcode of 31-03-2025
        //2 pointers approach will be used here
        
        unordered_map<char, int>mp;
        
        for(int i=0; i<n; i++)
        {
            mp[s[i]]=i;
        }
        
        int i=0, j=0;
        int end=mp[s[j]];
        
        while(j<n)
        {
            end=max(end, mp[s[j]]);
            
            if(j==end)
            {
                res.push_back(j-i+1);
                i=j+1;
            }
            
            j++;
        }
        
        return res.size();
    }
};
