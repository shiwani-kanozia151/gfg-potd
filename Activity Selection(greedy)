Activity Selection

https://www.geeksforgeeks.org/problems/activity-selection-1587115620/1

You are given a set of activities, each with a start time and a finish time, represented by the arrays start[] and finish[], respectively. 
A single person can perform only one activity at a time, meaning no two activities can overlap. Your task is to determine the maximum number 
of activities that a person can complete in a day.

Examples:

Input: start[] = [1, 3, 0, 5, 8, 5], finish[] = [2, 4, 6, 7, 9, 9]
Output: 4
Explanation: A person can perform at most four activities. The maximum set of activities that can be executed is {0, 1, 3, 4}

Input: start[] = [10, 12, 20], finish[] = [20, 25, 30]
Output: 1
Explanation: A person can perform at most one activity.

Input: start[] = [1, 3, 2, 5], finish[] = [2, 4, 3, 6]
Output: 3
Explanation: A person can perform activities 0, 1 and 3.

Constraints:

1 ≤ start.size() = finish.size() ≤ 2*10^5
1 ≤ start[i] ≤ finish[i] ≤ 10^9

APPROACH: 
this problem is basically based on the greedy approach and sorting technique. here basically first i have make pair of the starting and ending time and then sort it.
while making pair first i take ending time then starting time so that it will be easy for sorting if 2 ending time are same then it will sort according to the starting
time. if i will make pair according to the (start, end) then for sorting we need to have a comparator which will sort according the ending time and if 2 ending time are
matching then sort it according to the starting time..

CODE:
class Solution {
  public:
    int activitySelection(vector<int> &start, vector<int> &finish) {
        // code here
        vector<pair<int, int>>temp;
        int n=start.size();
        
        for(int i=0; i<n; i++)
        {
            temp.push_back({finish[i], start[i]});
        }
        
        sort(temp.begin(), temp.end());
        
        
        int end=temp[0].first;
        int count=1;
        
        for(int i=1; i<n; i++)
        {
           if(temp[i].second>end)
           {
               count++;
               end=temp[i].first;
           }
        }
        
        return count;
        
    }
};


