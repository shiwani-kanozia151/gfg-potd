Parenthesis Checker

https://www.geeksforgeeks.org/problems/parenthesis-checker2744/1

Given a string s, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.
An input string is valid if:

         1. Open brackets must be closed by the same type of brackets.
         2. Open brackets must be closed in the correct order.

Examples :

Input: s = "[{()}]"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "[()()]{}"
Output: true
Explanation: All the brackets are well-formed.

Input: s = "([]"
Output: False
Explanation: The expression is not balanced as there is a missing ')' at the end.

Input: s = "([{]})"
Output: False
Explanation: The expression is not balanced as there is a closing ']' before the closing '}'.
Constraints:
1 ≤ s.size() ≤ 10^6
s[i] ∈ {'{', '}', '(', ')', '[', ']'}


APPROACH: USING STACK
see first run a loop to move on the string and then if char=='(' or char=='{' or char=='[' then push it in the stack otherwise check for the top element of and check 
if char is opposite of the char of the string..


CODE:
class Solution {
  public:
    bool isBalanced(string& s) {
        // code here
        
        int n=s.size();
        stack<char>st;
        
        if(s[0]==')' || s[0]=='}' || s[0]==']')
         return false;
         
         
        for(int i=0; i<n; i++)
        {
            if(s[i]=='[' || s[i]=='{' || s[i]=='(')
             st.push(s[i]);
            else 
            {
                char ch=s[i];
                
                if(!st.empty())
                {
                    char temp=st.top();
                
                    if((ch==')' && temp=='(')||(ch=='}' && temp=='{')||
                          (ch==']' && temp=='['))
                        st.pop();
                    else
                     return false;
                }
                else
                 return false;
                     
            }
        }
        
        if(!st.empty())
         return false;
         
        return true; 
    }
};
