Partition Equal Subset Sum

https://www.geeksforgeeks.org/problems/subset-sum-problem2014/1

Given an array arr[], determine if it can be partitioned into two subsets such that the sum of elements in both parts is the same.
Note: Each element must be in exactly one subset.

Examples:

Input: arr = [1, 5, 11, 5]
Output: true
Explanation: The two parts are [1, 5, 5] and [11].

Input: arr = [1, 3, 5]
Output: false
Explanation: This array can never be partitioned into two such parts.

Constraints:
1 ≤ arr.size ≤ 100
1 ≤ arr[i] ≤ 200

APPROACH: USING RECURSION

as this problem i have already solve so i know its approach like first we need to find the sum if it is even then only they will be divided into equal subsets otherwise 
not possible after that we have to use the same approach which we had use to find the sum of subset 


CODE:

class Solution {
  public:
    
  
    bool solve(vector<int>&arr, int sum, int idx, vector<vector<int>>&t)
    {
        if(sum==0) return true;
        
        if(idx>=arr.size()) return false;
        
        if(t[idx][sum] != -1)
         return t[idx][sum];
        
        bool not_take = solve(arr, sum, idx+1, t);
        
        bool take=false;
        
        if(arr[idx]<=sum)
         take=solve(arr, sum-arr[idx], idx+1, t);
         
        return t[idx][sum]=take || not_take; 
    }
    bool equalPartition(vector<int>& arr) {
        // code here
        
        int sum=0, n=arr.size();
        
        //memset(t, -1, sizeof(t));
        
        for(int i=0; i<n; i++)
         sum += arr[i];
         
        if(sum%2!=0) return false;
        
        int x=sum/2;
        
        vector<vector<int>>t(n+1, vector<int>(x+1, -1));
        return solve(arr, sum/2, 0, t);
    }
};
