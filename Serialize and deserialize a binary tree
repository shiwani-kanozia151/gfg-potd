Serialize and deserialize a binary tree

Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions
serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]     
Output: [2, 1, 3]

Input: root = [10, 20, 30, 40, 60, N, N]    
Output: [40, 20, 60, 10, 30]


CODE: 

class Solution {
  public:
    // Function to serialize a tree and return a list containing nodes of tree.
    void pre(Node* root, vector<int>&res)
    {
        if(root==NULL)
        {
            res.push_back(-1);//to get to know that its left or right child is NULL
            return;
        }
        
        res.push_back(root->data);
        pre(root->left, res);
        pre(root->right, res);
        
    }
    vector<int> serialize(Node *root) {
        //using preorder to store the traversal it will make the further steps easy..
        vector<int>res;
        
        pre(root, res);
        
        return res;
    }

    // Function to deserialize a list and construct the tree.
    int i=0;
    Node *deSerialize(vector<int> &arr) {
        // Your code here
        int val=arr[i];
         i++;
        if(val==-1)//its left or right child is null...
         return NULL;
         
        Node* newNode=new Node(val);
      
        //as we are using preorder traversal thats why we r first moving to the left then right and befire that store the value in teh root.. 
        newNode->left=deSerialize(arr);
        newNode->right=deSerialize(arr);
        
        return newNode;
    }
};
