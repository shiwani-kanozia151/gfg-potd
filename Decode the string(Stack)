Decode the string

https://www.geeksforgeeks.org/problems/decode-the-string2444/1

Given an encoded string s, the task is to decode it. The encoding rule is :
k[encodedString], where the encodedString inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
Note: The test cases are generated so that the length of the output string will never exceed 105 .

Examples:

Input: s = "1[b]"
Output: "b"
Explanation: "b" is present only one time.

Input: s = "3[b2[ca]]"
Output: "bcacabcacabcaca"
Explanation:
1. Inner substring “2[ca]” breakdown into “caca”.
2. Now, new string becomes “3[bcaca]”
3. Similarly “3[bcaca]” becomes “bcacabcacabcaca ” which is final result.

Constraints:
1 ≤ |s| ≤ 10^5 

APPROACH:
to solve this question my approach was like to use stack to store the elemets of the string till we are not getting the closing bracket']' and then reverse that string
as the number that is required for repaeting is also in this string only so it might be of more than one digit therefore for that also we need to have pop the elements 
from the stack till we are getting the number and after that we need to repeat the string as per the number and then we will again put that string in the stack as it 
might be the part of the next string likewise and at the end after traversing all the elements of the string we will have ans in the stack by running a loop extract the 
string from it and at last return it..

CODE:

class Solution {
  public:
    string decodedString(string &s) {
        // code here
        stack<char>st;
        int n=s.size();
        
        for(int i=0; i<n; i++)
        {
            if(s[i]!=']')
             st.push(s[i]);
            else
            {
                string temp="";
                
                while(!st.empty() && st.top()!='[')
                {
                    temp.push_back(st.top());
                    st.pop();
                }
                
                reverse(temp.begin(), temp. end());
                st.pop();
                
                string num="";
                while(!st.empty() && isdigit(st.top()))
                {
                    num.push_back(st.top());
                    st.pop();
                }
                
                reverse(num.begin(), num.end());
                
                int times=stoi(num);
                
                string repeat;
                
                for(int j=0;j<times; j++)
                  repeat.append(temp);
                 
                for(int i=0; i<repeat.size(); i++)
                 st.push(repeat[i]);
            }
        }
        
        string ans="";
        
        while(!st.empty())
        {
            ans = st.top()+ans;
            st.pop();
        }
        
        return ans;
    }
};
