Fixing Two nodes of a BST

Given the root of a Binary search tree(BST), where exactly two nodes were swapped by mistake. Your task is to fix (or correct) the BST by swapping them back. Do not change the structure of the tree.
Note: It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong. All changes must be reflected in the original linked list.
 
Examples :
Input: root = [10, 5, 8, 2, 20]     
Output: 1
Explanation: The nodes 20 and 8 were swapped. 

APPROACH: here the approach to solve this problem is that the inorder traversal of the BST always give the sorted order so based on that if any node breaking htis rule
 need to get swapped there are 2 cases arrise in this problem 
case 1 : both adjacent elements are breaking the rule of sorted array..
case 2 : not both adjacent are breaking the rule ..
suppose the the array we get after traversal is like[4, 20, 6, 10, 15] here we see the not adjacent elemtns are breaking the rule of sorted array..
 eg [2,5,20,10,80] --> adjacent elements are breaking the rule of sorted array..

CODE: 


class Solution {
  public:
    Node*first, *prev, *temp, *second;
    
    void inorder(Node* root)
    {
        if(!root)
         return ;
         
        inorder(root->left);
         
        if(prev && root->data<prev->data)
        {
            if(!first)
            {
                first=prev;
                temp=root;
            }
            else
            {
              second=root;
            }
        }
        prev=root;
        
        inorder(root->right);
        
    }
    
    void correctBST(Node* root) {
        // add code here.
       first=second=prev=temp=NULL;
       
       inorder(root);
       
       if(first && second)
        swap(first->data, second->data);
        
       if(first && !second)
        swap(first->data, temp->data);
       
    }
};
