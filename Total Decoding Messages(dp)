Total Decoding Messages

https://www.geeksforgeeks.org/problems/total-decoding-messages1235/1

A message containing letters A-Z is being encoded to numbers using the following mapping:
'A' -> 1
'B' -> 2
...
'Z' -> 26
You are given a string digits. You have to determine the total number of ways that message can be decoded.

Examples:

Input: digits = "123"
Output: 3
Explanation: "123" can be decoded as "ABC"(1, 2, 3), "LC"(12, 3) and "AW"(1, 23).

Input: digits = "90"
Output: 0
Explanation: "90" cannot be decoded, as it's an invalid string and we cannot decode '0'.

Input: digits = "05"
Output: 0
Explanation: "05" cannot be mapped to "E" because of the leading zero ("5" is different from "05"), the string is not a valid encoding message.

Constraints:
1 ≤ digits.size() ≤ 10^3

APPROACH:
here basically to solve this problem we need to divide the strings in letter of 1 or 2 if we are using the 2 digits then we have to take care of that the two digit 
number cant exceed 26 so for that we are using some conditions so that the number do not exceed 26. 
condition here is if(idx!=n-1 && (digits[idx]=='1' ||digits[idx]=='2'&&  digits[idx+1]<='6'))


CODE:
class Solution {
  public:
    
    int t[1001];
    int solve(string &digits, int idx, int n)
    {
        if(idx==n)
          return 1;
          
        if(digits[idx]=='0')
         return 0;
        
        if(t[idx]!=-1)
         return t[idx];
        
        
        int one=solve(digits, idx+1, n);
        
        int two=0;
        if(idx!=n-1 && (digits[idx]=='1' ||digits[idx]=='2'
            &&  digits[idx+1]<='6'))
         two= solve(digits, idx+2, n);
        
        
        return t[idx] = one+two;
    }
    int countWays(string &digits) {
        // Code here
        
        int n=digits.size();
        memset(t, -1, sizeof(t));
       return solve(digits, 0, n);
    }
};

