Unique Number III

Given an array of integers arr[] where, every element appears thrice except for one which occurs once.
Find that element which occurs once.

Examples:

Input: arr[] = [1, 10, 1, 1]
Output: 10
Explanation: 10 occurs once in the array while the other element 1 occurs thrice.

Input: arr[] = [3, 2, 1, 34, 34, 1, 2, 34, 2, 1]
Output: 3
Explanation: All elements except 3 occurs thrice in the array.

Constraints:
1 ≤ arr.size() ≤ 10^5
arr.size() % 3 = 1
-10^9 ≤ arr[i] ≤ 10^9

APPROACH1: [Naive Approach] Nested Loop Frequency Counting - O(n^2) Time and O(1) Space
CODE:
int getSingle(vector<int>& arr) {
    int n = arr.size();

    // Iterate over every element
    for (int i = 0; i < n; i++) {

        // Initialize count to 0
        int count = 0;

        for (int j = 0; j < n; j++) {

            // Count the frequency of the element
            if (arr[i] == arr[j]) {
                count++;
            }
        }

        // If the frequency of the element is one
        if (count == 1) {
            return arr[i];
        }
    }

    // If no element exists at most once
    return -1;
}

APPROACH2: [Better Approach 1] Count Frequency of Elements Using Map - O(n) Time and O(n) Space
CODE:
int getSingle(vector<int> &arr) {
        // code here
        map<int, int>mp;
        int n=arr.size();
        
        for(int i=0; i<n; i++)
        {
            mp[arr[i]]++;
        }
        
        for(int i=0; i<n; i++)
        {
            if(mp[arr[i]]==1)
             return arr[i];
        }
        
        return 1;
    }

APPROACH3: 
int getSingle(vector<int>& arr) {
    unordered_set<int> uniqueElements;
    int totalSum = 0;

    // Calculate the sum of all elements and collect unique ones
    for (int num : arr) {
        totalSum += num;
        uniqueElements.insert(num);
    }

    int uniqueSum = 0;

    // Sum of all unique elements
    for (int num : uniqueElements) {
        uniqueSum += num;
    }

    //  3 * (sum of unique elements) - (sum of all elements)
    //  gives twice the unique element that appears once.
    //  So we divide by 2 to get the actual element.
    int result = (3 * uniqueSum - totalSum) / 2;
    return result;
}

