K Sized Subarray Maximum

https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

Given an array arr[] of integers and an integer k, your task is to find the maximum value for each contiguous subarray of size k. The output should be an array of maximum values corresponding to each contiguous subarray.

Examples:

Input: arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3
Output: [3, 3, 4, 5, 5, 5, 6] 
Explanation: 
1st contiguous subarray = [1 2 3] max = 3
2nd contiguous subarray = [2 3 1] max = 3
3rd contiguous subarray = [3 1 4] max = 4
4th contiguous subarray = [1 4 5] max = 5
5th contiguous subarray = [4 5 2] max = 5
6th contiguous subarray = [5 2 3] max = 5
7th contiguous subarray = [2 3 6] max = 6

Input: arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13], k = 4
Output: [10, 10, 10, 15, 15, 90, 90]
Explanation: 
1st contiguous subarray = [8 5 10 7], max = 10
2nd contiguous subarray = [5 10 7 9], max = 10
3rd contiguous subarray = [10 7 9 4], max = 10
4th contiguous subarray = [7 9 4 15], max = 15
5th contiguous subarray = [9 4 15 12], max = 15
6th contiguous subarray = [4 15 12 90], max = 90
7th contiguous subarray = [15 12 90 13], max = 90

Input: arr[] = [5, 1, 3, 4, 2, 6], k = 1
Output: [5, 1, 3, 4, 2, 6]
Explanation: 
When k = 1, each element in the array is its own subarray, so the output is simply the same array
Constraints:
1 ≤ arr.size() ≤ 10^6
1 ≤ k ≤ arr.size()
0 ≤ arr[i] ≤ 10^9

APPROACH1: USING NESTED LOOPS 

by this approach first loop go from 0 to n and the inner loop from 0 to k and in the inner loop finding the maximum of the window..
TC: O(N^2)

APPROACH: USING DEQUE 

by using the dequeue we will be able to pop and push from front as well as back that's why here we are using this ..
here we will take 2 pointers i and j starts it with 0 run a while loop till j<n and the in that loop finding the maximum like first we will check if the element present
at the last of the queue is smaller then pop that element as that will not become the maximum and after and keep on psushing the arr[j] in the queue and likewise we will 
run a loop and as soon the size become equal to the k then pop the element from the front and then push that element in the resultant array likewise we will do and if 
the element present in the queue is equal to element at arr[i] then that element need to be popped and i move one step forward..
TC: O(N)..

CODE:

class Solution {
  public:
    vector<int> maxOfSubarrays(vector<int>& arr, int k) {
        // code here
        
        int n=arr.size();
        deque<int>dq;
        
        vector<int>res;
        
        int i=0, j=0;
        
        while(j<n)
        {
            while(!dq.empty() && dq.back()<arr[j])
             dq.pop_back();
             
            dq.push_back(arr[j]);
            
             if(j-i+1==k)
            {
                int x=dq.front();
                res.push_back(x);
                
                if(arr[i]==x)
                 dq.pop_front();
                 
                i++;
                j++;
            }
            
            if(j-i+1<k)
             j++;
             
        }
        
        return res;
    }
};
