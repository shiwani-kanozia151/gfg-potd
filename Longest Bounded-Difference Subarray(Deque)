Longest Bounded-Difference Subarray

https://www.geeksforgeeks.org/problems/longest-bounded-difference-subarray/1

Given an array of positive integers arr[] and a non-negative integer x, the task is to find the longest sub-array where the absolute difference between any two elements is not greater than x.
If multiple such subarrays exist, return the one that starts at the smallest index.

Examples: 

Input: arr[] = [8, 4, 2, 6, 7], x = 4 
Output: [4, 2, 6] 
Explanation: The sub-array described by index [1..3], i.e. [4, 2, 6] contains no such difference of two elements which is greater than 4.

Input: arr[] = [15, 10, 1, 2, 4, 7, 2], x = 5 
Output: [2, 4, 7, 2] 
Explanation: The sub-array described by indexes [3..6], i.e. [2, 4, 7, 2] contains no such difference of two elements which is greater than 5. 

Constraints:
1 <= arr.size() <= 10^5
1 <= arr[i] <= 10^9
0 <= x<= 10^9

APPRAOCH1: USING NESTED LOOP

APPROACH2: USING DEQUE..

CODE:

class Solution {
  public:
    vector<int> longestSubarray(vector<int>& arr, int x) {
        // based on deque and sliding window...
        
        deque<int>maxdq;
        deque<int>mindq;
        int n=arr.size();
        
        int s=0, e=0, anss=0, anse=0;
        
        while(e<n)
        {
            //maxdq case..
            while(!maxdq.empty() && arr[maxdq.back()]<arr[e])
             maxdq.pop_back();
             
            //mindq case.....
            while(!mindq.empty() && arr[mindq.back()]>arr[e])
             mindq.pop_back();;
             
            maxdq.push_back(e);
            mindq.push_back(e);
            
            while(arr[maxdq.front()]-arr[mindq.front()]>x)
            {
                if(maxdq.front()==s)
                 maxdq.pop_front();
                 
                if(mindq.front()==s)
                 mindq.pop_front();
                 
                s++; 
            }
            
            
            if(e-s>anse-anss)
            {
                anss=s;
                anse=e;
            }
            
            
            e++;
            
        }
        
        
        vector<int>res;
        for(int i=anss; i<=anse; i++)
        {
            res.push_back(arr[i]);
        }
        
        return res;
    }
};
