k largest elements

Given an array arr[] of positive integers and an integer k, Your task is to return k largest elements in decreasing order. 

Examples:

Input: arr[] = [12, 5, 787, 1, 23], k = 2
Output: [787, 23]
Explanation: 1st largest element in the array is 787 and second largest is 23.

Input: arr[] = [1, 23, 12, 9, 30, 2, 50], k = 3 
Output: [50, 30, 23]
Explanation: Three Largest elements in the array are 50, 30 and 23.

Input: arr[] = [12, 23], k = 1
Output: [23]
Explanation: 1st Largest element in the array is 23.
Constraints:
1 ≤ k ≤ arr.size() ≤ 10^6
1 ≤ arr[i] ≤ 10^6

APPROACH1: using the sorting technique first sort the array and then return the elements from n-k to n..
    This appraoch might led to the time limit exceed as it is using O(nlogn) time ..

APPRAOCH2: using the concept of prioirty queue here we need to traverse the array and the elements in the queue only upto the size of k.  
          Here we are using minheap as we need k largest element that will be stored in the bottom of the queue while the elements that are smaller get pop from the 
          queue as it will go beyond the size of the k so they will be popped from it.

CODE: 

class Solution {
  public:
    vector<int> kLargest(vector<int>& arr, int k) {
        // Your code here
        priority_queue<int, vector<int>, greater<int>>pq;
        
        int n=arr.size();
        for(int i=0; i<n; i++)
        {
            pq.push(arr[i]);
            
            while(pq.size()>k)
            {
                pq.pop();
            }
        }
        
        vector<int>res;
        while(!pq.empty())
        {
            int x=pq.top();
            pq.pop();
            res.push_back(x);
        }
        
         reverse(res.begin(), res.end());
         
        return res;
    }
};   
