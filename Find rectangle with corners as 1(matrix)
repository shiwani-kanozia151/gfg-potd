Find rectangle with corners as 1

Given an n x m binary matrix mat[][] containing only 0s and 1s, determine if there exists a rectangle within the matrix such that all four corners of the rectangle are 1. If such a rectangle exists, return true; otherwise, return false.

Example:

Input: mat[][] =
[[1, 0, 0, 1, 0],
[0, 0, 1, 0, 1],
[0, 0, 0, 1, 0], 
[1, 0, 1, 0, 1]] 
Output: true
Explanation: Valid corners are at index (1,2), (1,4), (3,2), (3,4) 

Input:mat[][] =
[[0, 0, 0],
[0, 0, 0],
[0, 0, 0]]
Output: false
Explanation: There are no valid corners.

Constraints:
1 <= n, m <= 200
0 <= mat[i] <= 1

Approach:
here traversing the mat and whereever we find 1 from there we need to traverse that row and find the next 1 and in the same col traverse the row and find the 1 and atlast if the index at which there is 1 
at new col and new row then at that position also check if that is also 1 then return true also else false.

CODE:
bool ValidCorner(vector<vector<int> >& mat) {
        // code here
        int m=mat.size();
        int n=mat[0].size();
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(mat[i][j]==1)
                {
                    for(int k=j+1; k<n; k++)
                    {
                        if(mat[i][k]==1)
                        {
                            for(int l=i+1; l<m; l++)
                            {
                                if(mat[l][j]==1)
                                {
                                    if(mat[l][k]==1)
                                     return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        
        return false;
    }
